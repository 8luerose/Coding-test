'''
개념

1. 7 x 7 사각형일 때 마지막 dis[6][6] = 여기에 담겨질 의미는 '출발점'에서 '해당 좌표'까지의 몇 번만에 방문할 수 있는지 최단거리
	= 따라서 출발점에서 마지막 좌표까지 '최단 경로'를 구하기 위해서 'BFS'를 사용한다
	= BFS는 '최단 경로'를 구하기 위한 알고리즘이다
2. 출발점에서 4방향을 뻗어나간다
	= 진행되면서 기존 dis[x][y] = dis[tmp[0]][tmp[1]] + 1 이렇게 + 1 씩 진행된다
3. 진행과정
	= que에 담긴 게 없을 때까지 반복
	= 담긴 게 없다는 의미는 모든 방향을 돌았으나 더 이상 갈 곳이 없다는 의미
	= 1개 꺼내서 -> for 4방향 돌아주는데 -> 벽이 아니고, 방문하지 않았을 경우만 -> 방문하면 방문체크, dis[x][y] = dis[기][존] + 1
	= que.append((x, y)) == .append([튜플])

4. 4방향
	= dx = [-1, 0, 1, 0]	 										# 시계방향 12 -> 3 -> 6 -> 9
	= dy = [0, 1, 0, -1]											# dy는 dx의 반대
'''

from collections import deque

dx = [-1, 0, 1, 0]
dy = [0, 1, 0, -1]

board = [list(map(int, input().split())) for _ in range(7)]			# 한 줄 씩 * for _ in range()
dis = [[0] * 7 for _ in range(7)]									# dis = ([0] * 7) * for _ in range() == [0][0][0][0][0][0][0] * for

# 준비됐어? 이제 큐에 담고 시작한다?
Q = deque()
Q.append((0, 0))													# 출발 지점 (0,0) 에 대해서 append하면 인자 2개라 오류 -> 튜플을 (0, 0) 리스트에 추가하려면 ((0, 0)) 이렇게 감싸야 한다

board[0][0] = 1 													# 출발 지점 방문 체크
while(Q):
	tmp = Q.popleft()
	for i in range(4):												# 4방향 탐색
		x = tmp[0] + dx[i]											# (,) 튜플 중 왼쪽[0] + (12 -> 3 -> 6 -> 9 좌표)
		y = tmp[1] + dy[i]											# (,) 튜플 중 오른쪽[1] + (12 -> 3 -> 6 -> 9 좌표)
		
		if ((0 <= x <= 6) and (0<= y <= 6) and board[x][y] == 0):	# 벽이 아니고, 방문하지 않았을 경우만
			board[x][y] = 1											# 앞으로 방문할거 미리 방문체크
			dis[x][y] = dis[tmp[0]][tmp[1]] + 1						# 앞으로 방문할 dis[x][y] = dis[기][존] + 1
			Q.append((x, y))										# 방문했으니까 큐에 넣어서 BFS으로 쓴다 -> 또 가닥 뻗어야하니까 for(4방향)
	
if (dis[6][6] == 0):												# 도착지점에 도착하지 못했을 경우 -> -1
	print(-1)
else :
	print(dis[6][6])


'''

0 0 0 0 0 0 0
0 1 1 1 1 1 0
0 0 0 1 0 0 0
1 1 0 1 0 1 1
1 1 0 1 0 0 0
1 0 0 0 1 0 0
1 0 1 0 0 0 0
= 12

'''