'''
개념
1. 부분집합은 2^n개가 존재한다. 넣을 건지 or 넣지 않을 건지 2개의 경우의 수가 있기 때문
	= 그러나 공집합을 제외하면 2^n - 1개가 존재한다.
2. 구체적으로 1, 2, 3이 있을 때, {1}, {2}, {3}, {1, 2}, {1, 3}, {2, 3}, {1, 2, 3}을 부분집합이라고 한다.
3. 부분집합을 구하는 방법은 DFS를 이용한다.
4. DFS를 이용할 때는, 각각의 원소가 포함되는 경우와 포함되지 않는 경우로 나누어서 생각한다.
	= 1 사용한다 or 사용하지 않는다 -> '1 사용한다' -> 2 사용한다 or 사용하지 않는다 -> '2 사용하지 않는다' -> 3 사용한다 or 사용하지 않는다
    = 이런 것을 상태트리라고 한다.
5. 사용하는 것만 골라서 출력하면 된다. ex) 1 사용한다, 3 사용한다 = 1 3
'''

def DFS(v):
    if (v == n + 1):				# 종료 지점. DFS(v+1) 타고 왔을 때, 예를 들어 4면 3을 넘으니까 종료된다
        for i in range(1, n + 1): 	# 종료 요건 충족했으니, 모두 출력
            if (arr[i] == 1):		# 플래그 arr가 1일 때 ex) [1] = 1, [2] = 1, [3] = 1
                print(i, end=' ')
        print()						# 줄 바꿈
    else :							# 정상 지점. 쓰는지 안쓰는지 플래그 세워주고, DFS 돌린다
        arr[v] = 1					# v(1,2,3 실제 수)를 사용한다 플래그
        DFS(v + 1)					# DFS타고 넘어가서 1이었으면 2가 돼서 플래그 다시 켜주고 3되고 ..
        arr[v] = 0					# 3다음 4라서 종료되고 3인채 돌아옴. 1 2 (3=0) 맨 뒤부터 0처리
        DFS(v + 1)					# [1][1][0] 인채로 4로 감. 1 2 출력


n = int(input())
arr = [0] * (n + 1)					# 숫자 사용됐는지 플래그 용. 0번째 인덱스는 사용하지 않는다. 1,2,3 처럼 1부터 사용
DFS(1)

'''
3

=
1 2 3
1 2
1 3
1
2 3
2
3
'''